plugins {
	id 'antlr'
	id 'application'
	id 'checkstyle'
	id 'java'
	id 'jacoco'

	id 'com.github.kt3k.coveralls' version '2.8.1'
	id 'com.gradle.build-scan' version '2.2.1'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = 'at.ac.tuwien.kr.alpha.Main'

def antlrVersion = '4.7'

repositories {
	mavenCentral()
	jcenter()
}

/* The following configuration directive is a work-around for a fault in the Gradle
 * ANTLR plugin. It would require both antlr4 and antlr4-runtime at compile time and
 * at run time, which unnecessarily bloats our JARs. Only antlr4-runtime is needed.
 * We therefore remove this extension of antlr dependenIterablecies being compile dependencies
 * and reintroduce them on our own.
 */
configurations {
	compile {
		extendsFrom = extendsFrom.findAll { it != configurations.antlr }
	}
}

dependencies {
	// We need to give the ANTLR Plugin a hint.
	antlr group: 'org.antlr', name: 'antlr4', version: "${antlrVersion}"

	// Re-introduce antlr4-runtime as compile dependency.
	compile group: 'org.antlr', name: 'antlr4-runtime', version: "${antlrVersion}"

	compile group: 'ch.qos.logback',     name: 'logback-classic',      version: '1.1.7'
	compile group: 'commons-cli',        name: 'commons-cli',          version: '1.3.1'
	compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
	compile group: 'org.apache.commons', name: 'commons-lang3',        version: '3.6'
	compile group: 'org.reflections',    name: 'reflections',          version: '0.9.11'
	compile group: 'com.h2database',	 name: 'h2', 				   version: '1.4.199'

	testCompile group: 'junit', name: 'junit', version: '4.12'
}

tasks.withType(AntlrTask) {
	// See https://github.com/antlr/antlr4/blob/master/doc/tool-options.md
	arguments += [
			"-visitor",
			"-no-listener",
			"-long-messages",
			"-package", "at.ac.tuwien.kr.alpha.antlr",
			"-Werror",
			"-Xlog",
			"-lib", "src/main/antlr/at/ac/tuwien/kr/alpha/antlr"
	]
}

compileJava {
	options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
	options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

// Fix checkstyle version.
checkstyle {
	toolVersion = "7.6"
}


task bundledJar(type: Jar) {
	manifest {
		attributes 'Main-Class': mainClassName
	}

	from {
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	}

	archiveName = "${project.name}-bundled.jar"

	with jar
}

jacocoTestReport {
	reports {
		xml.enabled = true
		html.enabled = true
	}

	// NOTE: Contents of the antlr subpackage are autogenerated (see configuration of
	//       AntlrTasks above). It does not make sense to include them in our coverage
	//       report.
	afterEvaluate {
		getClassDirectories().setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: "at/ac/tuwien/kr/alpha/antlr/**")
		}))
	}
}

test {
	testLogging {
		exceptionFormat = 'full'
	}
	
}

wrapper {
	gradleVersion = '5.3'
	distributionType = 'ALL'
}

buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
	// Detect whether the build is running on Travis CI, and if
	// so, add a reference from the build scan to the build.
        if (System.getenv('TRAVIS')) {
		tag 'ci'
                link('Travis CI', System.getenv('TRAVIS_JOB_WEB_URL'))
        }
        buildScanPublished { com.gradle.scan.plugin.PublishedBuildScan scan ->
                file('build/scan.txt') << "${scan.buildScanUri}\n"
        }
}
